ㅇ리액트 쓰는이유

SPA를 쉽게 만들 수 있음 ( 페이지 전환시 새로고침 없이 부드럽게 이동이 되는 사이트 라고 생각하면 됨 single page appplication )  
!화면전환의 부드러운 이유 - html파일을 1개만 쓰고 다른 페이지를 보여주고 싶을 때 html부분만 갈아치워서 보여주는 형식이라
일반 js로도 가능하지만 리액트라는 라이브러리를 사용하면 훨씬 쉽게 만들 수 있다.

+ 다른 이유로는 html을 함수, 객체 등에 보관하고 재사용할 수 있다는 점 ( 큰 프로젝트일 수록 html 관리가 편리함 )
- react native 쓰면 같은 리액트 문법으로 모바일 앱개발도 가능해짐( html css 문법만 살짝 다름 )

ㅇ기본문법 JSX문법 사용

1. html에 클래스 넣을때는 class 가 아닌 className 사용
2. 변수를 html에 꽂아넣을 때는 { } 사용 ( vue.js 에서는 {{ }} 였음 )
3. html에 스타일속성을 넣고싶으면 style="" 가 아닌 style={ } 안에 { } 자료형으로 입력 + 카멜케이스
<div style={ {color : 'blue', fontSize : '30px'} }> 글씨 </div>

ㅇ중요한 데이터는 변수가 아닌 state에 담는다.
함수위에 import { useState } from 'react';
함수안에 let [a,b] = useState(값) (a는 호출할 state이름 b는 값을 수정해줄 함수 b(값) 이렇게하면 state의 값이 바뀜)
state 쓰는 이유 - 재렌더링이 됨 ( 기본 js 에서는 값을 바꿨으면 바뀐 값을 보여주는 코드가 따로 필요 ) 
!주의 state값 변경시 변경함수는 값을 갈아 치워주는것이라 깔끔하게 새로운 state값을 집어넣어야한다.
ex) let [값,변경함수] = usetState(1) 일때 변경함수(값 = 값 + 1) <- 잘못된거 , 변경함수(값 + 1) <- 옳은거

!주의 배열이나 객체 데이터의 state를 수정하고 싶을 땐 원본의 값을 수정하기보다는 복사본을 만들어서 수정을 하고 덮는 것이 좋은 판단
let [배열,변경함수] = useState( [1,2,3,4] )
let copy = [...배열];
copy[0] = '바뀔값';
변경함수(copy)

!state값 작명할때는 [작명,set작명] 으로 하는게 국룰

ㅇ이벤트 사용
일반 js 에서는 onclick 이라면 리액트에서는 onClick={함수} or onClick={ () => { 코드 } } 

ㅇ. return() 안에서는 하나의 태그로 감싸져 있어야한다.
의미없는 태그로감싸고 싶지 않다면 <></> 로 감쌀 수 있으며 fragment라고 함