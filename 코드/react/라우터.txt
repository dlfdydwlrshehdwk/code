react-router-dom

ㅇ설치
터미널 열고 npm install react-router-dom@6

ㅇ셋팅 
index.js
1. root위에 import { BrowserRouter } from "react-router-dom";
2. <App /> 을  <BrowserRouter> </BrowserRouter> 로 감싸주기

ㅇ사용
1. 상단에 필요한것들을 import 해온다.
2. <Routes>만들고 그 안에 <Route>를 작성
3. <Route path="/경로" element={ 보여줄html ( 컴포넌트 ) } 작성

App.js

import { Routes, Route, Link } from 'react-router-dom'

function App(){
  return (
    <Routes>
      <Route path="/" element={ <Home /> } />
      <Route path="/detail" element={ <Detail /> } />
      <Route path="/detail" element={ <Detail data={data}/> } /> 라우터사용에도 프롭스값을 전달할 수 있음
      <Route path="/about" element={ <div>어바웃페이지임</div> } /> 그냥 html을 작성할 수도 있음
    </Routes>
  )
}

ㅇ라우터이동 두가지 Link , useNavigate()
Link

1. react-router-dom 에서 Link 컴포넌트 임포트 해온다.
2. <Link to="경로">경로</Link> (a태그와 비슷)

useNavigate()

import { Routes, Route, Link, useNavigate, Outlet } from 'react-router-dom'

function App(){
  let navigate = useNavigate()
  
  return (
    <button onClick={()=>{ navigate('/detail') }}>이동버튼</button>
  )
}

유용한 기능들이 있다. 예를들면
navigate(-1) - 뒤로가기 , navigate(2) - 앞으로 2번가기 


ㅇ404페이지
 <Route path="*" element={ <div>없는페이지임</div> } />

ㅇ서브경로를 만들 수 있는 nested routes

<Route path="/about/member" element={ <div>멤버들</div> } />
<Route path="/about/location" element={ <div>회사위치</div> } />
about에서 서브경로를 만든다면 기존은 이렇게 만들었을 것

이렇게도 사용이 가능하다.
<Route path="/about" element={ <About/> } >  
  <Route path="member" element={ <div>멤버들</div> } />
  <Route path="location" element={ <div>회사위치</div> } />
</Route>
<Route>안에 <Route>를 넣을 수 있는데 이걸 Nested routes 라고 한다.

ㅇOutlet 
nested routes안의 element들을 어디에 보여줄지 표기하는 곳이다.

<Route path="/about" element={ <About/> } >  
  <Route path="member" element={ <div>멤버들</div> } />
  <Route path="location" element={ <div>회사위치</div> } />
</Route>

function About(){
  return (
    <div>
      <h4>about페이지임</h4>
      <Outlet></Outlet>
    </div>
  )
}

유사한 서브페이지들이 많이 필요하다면 이렇게 사용이 가능
!팁 spa에서는 기본적으로 한페이지구조이기 때문에 뒤로가기가 되지않는데
라우터를 사용하면 주소이동이 있기에 뒤로가기가 가능해진다.

ㅇ서브페이지가 여러개라면... useParams
<Route path="/detail/:id" element={ <Detail data={data}/> }/>

/:어쩌구 는 '아무문자' 를 뜻한다. -> /detail/아무거나 입력하면 Detail컴포넌트를 보여달라는 뜻

셋팅
import { useParams } from 'react-router-dom'

사용
컴포넌트안에서 return() 밖에서
let {id} = useParams();  (id이건 아무렇게 작명가능)

결과 사이트주소/detail/2 로 접속시 Detail컴포넌트가 보이며 useParams의 값은 2이다. 이런걸 이용해서 상품의 상세페이지 같은거 이용가능할듯. 
!추가 path작명시 url파라미터는 몇번이고 사용가능 detail/:어쩌구/:저쩌구 ... 와 같이