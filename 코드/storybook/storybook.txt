스토리북 
UI컴포넌트 개발 도구 - 회사의 UI라이브러리를 내부 개발자들을 위해 문서화 할 수 있으며 외부 공개용 디자인 시스템을 
개발하기 위한 기본 플랫폼으로도 사용이 가능

쉽게 말하면 해당 UI 컴포넌트를 독립된 환경에서 개발할 수 있게 만든 도구 이다.

설치
1. 리액트 앱 에서 설치 
리액트 설치 - 터미널 npx create-react-app 작명
스토리북 설치 - cd 작명 -  터미널 npx @storybook/cli sb init 또는 yarn sb init

설치가 끝나면 packge.json파일에 2개의 스크립트와 여러개의 개발 의존성이 추가된것을 확인할 수 있다
스토리북, 빌드-스토리북 . @스토리북 어쩌구 여러개
addons.js파일은 Storybook 애드온을 추가할 때 사용하고, config.js 파일은 그 밖에 다른 설정을 할 때 사용된다.

.storybook/config.js 파일을 열고, src 디렉터리 내부에 stories.js로 끝나는 모든 파일이 Story로 인식되도록 설정해준다.
 (기본 설정은 src/stories 디렉터리 하위만 탐색하므로 주석 처리가 하거나 삭제함.)
2. 실행 - 스토리북 인터넷창이 뜬다.
npm run strorybook or yarn sb init - yarn storybook

3. 하는법
.storybook - 스토리북 설정 파일 포함
src/stories - 스토리북 예제 컴포넌트

필요한거.
작명.js or jsx or tsx 
작명.stories.js or jsx or tsx 

작명.js 기본틀 ( css import할거면 여기에서 )

import React from 'react';

export default function Task ({ 받아올 프롭스값 }) {
  return (
	<div>코드</div>
  )
}

Task.propTypes = {
	// 각 프롭스값들 타입지정 - 문제를 조기에 발견하는데 도움을 줌.
}

작명.stories.js

import React from "react";
import 컴포넌트명 from "경로";

export default {
  component : // 컴포넌트명,
  title : // 스토리북에 보일 타이틀명,
  argTypes : { // 각 스토리 args의 행동방식을 정렬(스토리북에 적용됨)
예시 value : { control : "text" } , onChange : { action : "onChange" }
}
}

const Template = (args) => <컴포넌트명 {...args} />;

// 기본이 한개는 꼭 필요
export const 작명 = Template.bind({});
작명.args = {
	// 프롭스값
	id : 값
};

// 다른조건으로 만들고 싶으면
export const 작명2 = Template.bind({});
Pinned.args = {
	// 프롭스값
	어쩌구 : 저쩌구
};
